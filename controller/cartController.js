const { Product } = require("../models/productModel");
const Cart = require("../models/cartModel");
const SaleProduct = require("../models/SaleProduct");

const cartController = {
    // L·∫•y gi·ªè h√†ng c·ªßa user
    getCart: async (req, res) => {
        try {
            const userId = req.user.userId;
            console.log(userId);
            if (!userId) {
                return res.status(401).json({message : 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'})
            }
            let cart = await Cart.findOne({ userId: userId }).populate("products.productId");

            if (!cart) {
                cart = new Cart({ userId, products: [], totalPrice: 0 });
                await cart.save();
            }


            return res.json({message : 'L·∫•y d·ªØ li·ªáu trong gi·ªè h√†ng th√†nh c√¥ng ', data : cart});
        } catch (e) {
            console.error("L·∫•y gi·ªè h√†ng th·∫•t b·∫°i: " + e.message);
            return res.status(500).json({ message: "L·ªói server", error: e.message });
        }
    },

    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng


        addToCart: async (req, res) => {
            try {
                const userId = req.user.userId;
                const { productId, quantity, size, color } = req.body;

                let cart = await Cart.findOne({ userId });
                if (!cart) {
                    cart = new Cart({ userId, products: [], totalPrice: 0 });
                }

                const product = await Product.findById(productId);
                if (!product) {
                    return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
                }

                // üè∑ Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ ƒëang gi·∫£m gi√° kh√¥ng
                let discount = 0;
                const saleProduct = await SaleProduct.findOne({ productId });
                if (saleProduct && new Date(saleProduct.expireAt) > new Date()) {
                    if (saleProduct.limit > 0) {
                        discount = saleProduct.discount;
                    }
                }

                const discountedPrice = product.price * (1 - discount / 100); // T√≠nh gi√° sau gi·∫£m gi√°

                // üîç Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
                const index = cart.products.findIndex(p =>
                    p.productId.equals(productId) && p.size === size && p.color === color
                );

                if (index === -1) {
                    // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong gi·ªè h√†ng
                    cart.products.push({ productId, quantity, disCountSale: discount ,size, color, price: discountedPrice });
                } else {
                    // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ th√¨ tƒÉng s·ªë l∆∞·ª£ng
                    cart.products[index].quantity += quantity;
                    cart.products[index].price = discountedPrice; // C·∫≠p nh·∫≠t gi√° theo gi·∫£m gi√°
                }

                // üßæ C·∫≠p nh·∫≠t t·ªïng gi√° ti·ªÅn c·ªßa gi·ªè h√†ng
                cart.total = await calculateTotalPrice(cart.products);

                await cart.save();
                return res.status(200).json({ message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng", cart });
            } catch (e) {
                console.error("Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i: " + e.message);
                return res.status(500).json({ message: "L·ªói server", error: e.message });
            }
        },

    //  C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng

    updateCart: async (req, res) => {
        try {
            const userId = req.user.userId;
            const { productInCartId, quantity, size, color } = req.body;

            // Ki·ªÉm tra n·∫øu quantity kh√¥ng h·ª£p l·ªá
            if (isNaN(quantity) || quantity < 0) {
                return res.status(400).json({ message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
            }

            // Ki·ªÉm tra n·∫øu size v√† color kh√¥ng tr·ªëng
            if (!size || !color) {
                return res.status(400).json({ message: "Size v√† m√†u s·∫Øc kh√¥ng ƒë∆∞·ª£c tr·ªëng" });
            }

            // T√¨m gi·ªè h√†ng c·ªßa user
            let cart = await Cart.findOne({ userId });
            if (!cart) {
                return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
            }

            // T√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
            const index = cart.products.findIndex(p => p._id.equals(productInCartId));
            if (index === -1) {
                return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });
            }

            // N·∫øu quantity = 0 -> X√ìA s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            if (quantity === 0) {
                cart.products.splice(index, 1);
            } else {
                // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ DB
                const product = await Product.findById(cart.products[index].productId);
                if (!product) {
                    return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
                }

                // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ khuy·∫øn m√£i kh√¥ng
                let discount = 0;
                const saleProduct = await SaleProduct.findOne({ productId: product._id });

                if (saleProduct && new Date(saleProduct.expireAt) > new Date()) {
                    discount = saleProduct.discount;
                }

                // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m trong gi·ªè h√†ng
                cart.products[index].quantity = quantity;
                cart.products[index].size = size;
                cart.products[index].color = color;
                cart.products[index].price = product.price * (1 - discount / 100); // C·∫≠p nh·∫≠t gi√° sau gi·∫£m gi√°
            }

            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn gi·ªè h√†ng
            cart.total = await calculateTotalPrice(cart.products);

            // L∆∞u thay ƒë·ªïi v√†o DB
            await cart.save();

            return res.status(200).json({ message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng", cart });
        } catch (e) {
            console.error("C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i: " + e.message);
            return res.status(500).json({ message: "L·ªói server", error: e.message });
        }
    },

    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    removeFromCart: async (req, res) => {
        try {
            const userId = req.user.userId;
            const { productInCartId } = req.params;

            let cart = await Cart.findOne({ userId });
            if (!cart) {
                return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
            }

            // L·ªçc b·ªè s·∫£n ph·∫©m c·∫ßn x√≥a
            cart.products = cart.products.filter(p => !p._id.equals(productInCartId));

            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
            cart.total = await calculateTotalPrice(cart.products);

            await cart.save();
            return res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng", cart });
        } catch (e) {
            console.error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i: " + e.message);
            return res.status(500).json({ message: "L·ªói server", error: e.message });
        }
    }
};

// H√†m t√≠nh t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng
async function calculateTotalPrice(products) {
    let total = 0;
    for (let item of products) {
            total += item.price * item.quantity; // S·ª≠ d·ª•ng gi√° ƒë√£ gi·∫£m (n·∫øu c√≥)
    }
    return total;
}


module.exports = cartController;

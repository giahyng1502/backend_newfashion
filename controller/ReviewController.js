const { uploadImage } = require("../lib/cloudflare");
const { Review, Product } = require("../models/productModel");
const Order = require("../models/orderModel");
const reviewController = {
  addReview: async (req, res) => {
    try {
      const { orderId } = req.params;
      const { content, productId } = req.body;
      const rate = parseInt(req.body.rate);
      const userId = req.user.userId;
      const files = req.files;
      let images;
      console.log(userId);
      // üîé Ki·ªÉm tra ƒë∆°n h√†ng h·ª£p l·ªá v√† thu·ªôc v·ªÅ ng∆∞·ªùi d√πng
      const order = await Order.findOne({ $and : [{_id: orderId} , {userId : userId}] });

      if (!order) {
        return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc v·ªÅ b·∫°n" });
      }
      // üöõ Ch·ªâ cho ph√©p ƒë√°nh gi√° n·∫øu ƒë∆°n h√†ng ƒë√£ giao th√†nh c√¥ng
      if (order.status !== 3) {
        return res.status(400).json({ message: "B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° khi ƒë∆°n h√†ng ƒë√£ giao th√†nh c√¥ng" });
      }

      // üõçÔ∏è Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng kh√¥ng
      const itemInOrder = order.items.find((item) => item.productId.toString() === productId);
      if (!itemInOrder) {
        return res.status(400).json({ message: "S·∫£n ph·∫©m kh√¥ng n·∫±m trong ƒë∆°n h√†ng n√†y" });
      }

      //  Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y ch∆∞a
      const existingReview = await Review.findOne({ productId: productId, userId, orderId });
      if (existingReview) {
        return res.status(400).json({ message: "B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi!" });
      }

      // üè∑Ô∏èKi·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
      const product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
      }

      //  L·∫•y th√¥ng tin m√†u s·∫Øc & k√≠ch th∆∞·ªõc ƒë√£ mua
      const purchased = `M√†u: ${itemInOrder.color?.nameColor || "Kh√¥ng x√°c ƒë·ªãnh"} / K√≠ch th∆∞·ªõc: ${itemInOrder.size}`;
      if (files.length > 0) {
        images = await uploadImage(files);
      }
      // ‚úçÔ∏è T·∫°o review m·ªõi
      const newReview = new Review({
        content,
        rate,
        purchased,
        productId,
        orderId,
        images,
        userId,
      });
      //  L∆∞u review v√†o DB
      await newReview.save();

      //  T·ªëi ∆∞u c·∫≠p nh·∫≠t rating trung b√¨nh
      product.rateCount += 1;
      product.totalRating = (product.totalRating || 0) + rate;
      product.rating = parseFloat((product.totalRating / product.rateCount).toFixed(1));

      // L∆∞u c·∫≠p nh·∫≠t v√†o DB
      await product.save();
      console.log(newReview)
      const newOrder = await Order.findOneAndUpdate(
          { _id: orderId, "items.productId": productId },
          { $set: { "items.$.reviewId": newReview._id } },
          { new: true }
      );
      console.log(order)
      return res.status(201).json({ message: "ƒê√°nh gi√° th√†nh c√¥ng", review: newReview });

    } catch (error) {
      console.error("L·ªói th√™m review:", error);
      return res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },


  getReviewByProductId: async (req, res) => {
    try {
      const { productId } = req.params;
      const limit = parseInt(req.query.limit) || 5;
      const page = parseInt(req.query.page) || 1;
      const skip = (page - 1) * limit;

      // ƒê·∫øm t·ªïng s·ªë review cho s·∫£n ph·∫©m
      const totalReviews = await Review.countDocuments({ product: productId });

      // L·∫•y danh s√°ch review c√≥ ph√¢n trang v√† s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
      const reviews = await Review.find({ product: productId })
          .sort({ createdAt: -1 }) // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo th·ªùi gian
          .skip(skip)
          .limit(limit).populate("userId",'name avatar');

      return res.status(200).json({
        message: "L·∫•y review th√†nh c√¥ng",
        data: reviews,
        currentPage: page,
        totalPages: Math.ceil(totalReviews / limit),
        totalReviews: totalReviews,
      });

    } catch (error) {
      console.error("L·ªói khi l·∫•y review:", error);
      return res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  deleteReview: async (req, res) => {
    try {
      const { reviewId } = req.body;
      const userId = req.user.userId;

      // Ki·ªÉm tra thi·∫øu d·ªØ li·ªáu
      if (!reviewId) {
        return res.status(400).json({ message: "Thi·∫øu reviewId!" });
      }

      // T√¨m review tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra quy·ªÅn x√≥a
      const review = await Review.findById(reviewId);
      if (!review) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y review!" });
      }

      // Ki·ªÉm tra quy·ªÅn x√≥a (ch·ªâ cho ph√©p ng∆∞·ªùi t·∫°o review x√≥a)
      if (review.userId.toString() !== userId ) {
        return res.status(400).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a review n√†y!" });
      }

      // Th·ª±c hi·ªán x√≥a review
      await Review.deleteOne({ _id: reviewId });

      return res.status(200).json({ message: "X√≥a review th√†nh c√¥ng", data: review });
    } catch (e) {
      console.error("X√≥a review s·∫£n ph·∫©m th·∫•t b·∫°i:", e.message);
      return res.status(500).json({ message: "L·ªói server", error: e.message });
    }
  }
};

module.exports = reviewController;
